// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using crud_system.Data;

#nullable disable

namespace crud_system.Migrations
{
    [DbContext(typeof(CourseManagementContext))]
    [Migration("20241202212508_third-migration")]
    partial class thirdmigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("crud_system.Models.Chapter", b =>
                {
                    b.Property<Guid>("ChapterID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ChapterNumber")
                        .HasColumnType("int");

                    b.Property<string>("ChapterPDF")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChapterVideo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ChapterID");

                    b.HasIndex("CourseName");

                    b.ToTable("Chapters");
                });

            modelBuilder.Entity("crud_system.Models.Course", b =>
                {
                    b.Property<Guid>("CourseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CourseChapter")
                        .HasColumnType("int");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CourseID");

                    b.HasIndex("CourseName")
                        .IsUnique();

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("crud_system.Models.Student", b =>
                {
                    b.Property<Guid>("StudentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClassType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int");

                    b.HasKey("StudentID");

                    b.HasIndex("CourseName");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("crud_system.Models.StudentAccess", b =>
                {
                    b.Property<Guid>("AccessNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StudentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccessNumber");

                    b.HasIndex("StudentID")
                        .IsUnique();

                    b.ToTable("StudentAccesses");
                });

            modelBuilder.Entity("crud_system.Models.Chapter", b =>
                {
                    b.HasOne("crud_system.Models.Course", "Course")
                        .WithMany("Chapters")
                        .HasForeignKey("CourseName")
                        .HasPrincipalKey("CourseName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("crud_system.Models.Student", b =>
                {
                    b.HasOne("crud_system.Models.Course", "Course")
                        .WithMany("Students")
                        .HasForeignKey("CourseName")
                        .HasPrincipalKey("CourseName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("crud_system.Models.StudentAccess", b =>
                {
                    b.HasOne("crud_system.Models.Student", "Student")
                        .WithOne("StudentAccess")
                        .HasForeignKey("crud_system.Models.StudentAccess", "StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("crud_system.Models.Course", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("crud_system.Models.Student", b =>
                {
                    b.Navigation("StudentAccess")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
